plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
        }

        server {
            args '--nogui'
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = 'https://maven.blamejared.com'
        name = 'BlameJared Maven'
    }

    maven {
        url "https://maven.architectury.dev/"
    }

    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.ftb.mods"
        }
    }

    maven {
        url "https://cursemaven.com"
    }

    maven { url "https://maven.tehnut.info" }

    maven { url "https://maven.architectury.dev/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // FTB Library - REQUIRED
    compileOnly(fg.deobf("dev.ftb.mods:ftb-library-forge:${rootProject.ftb_library_version}"))
    runtimeOnly(fg.deobf("dev.ftb.mods:ftb-library-forge:${rootProject.ftb_library_version}"))
    // FTB Chunks - OPTIONAL
    compileOnly(fg.deobf("dev.ftb.mods:ftb-chunks-forge:${rootProject.ftb_chunks_version}"))
    runtimeOnly(fg.deobf("dev.ftb.mods:ftb-chunks-forge:${rootProject.ftb_chunks_version}"))
    // FTB Teams - OPTIONAL
    compileOnly(fg.deobf("dev.ftb.mods:ftb-teams-forge:${rootProject.ftb_teams_version}"))
    runtimeOnly(fg.deobf("dev.ftb.mods:ftb-teams-forge:${rootProject.ftb_teams_version}"))
    // CraftTweaker - OPTIONAL
    compileOnly(fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:${crafttweaker_version}"))
    // Architectury - REQUIRED DEPENDENCY OF DEPENDENCY
    runtimeOnly(fg.deobf("me.shedaniel:architectury-forge:${rootProject.architectury_version}"))
    // Hwyla - OPTIONAL
    compileOnly fg.deobf("curse.maven:hwyla-253449:3033593")
    runtimeOnly(fg.deobf("curse.maven:hwyla-253449:3033593"))

    runtimeOnly(fg.deobf("curse.maven:irongenerators-446489:3290772"))
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            ftb_library_version: ftb_library_version, ftb_chunks_version: ftb_chunks_version,
            ftb_teams_version: ftb_teams_version, crafttweaker_version: crafttweaker_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}